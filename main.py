import streamlit as st
import os
from PIL import Image
import google.generativeai as genai
from dotenv import load_dotenv
import fitz  # PyMuPDF
import markdown
from markdownify import markdownify as md
from concurrent.futures import ThreadPoolExecutor, as_completed
import pypandoc

# Load environment variables from a .env file
load_dotenv()

# Configure the genai library with an API key obtained from the environment variables
# This API key is necessary for authenticating requests to the service
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

# Initialize a generative model using the 'gemini-pro-vision' model
# This model is likely used for generating or processing images using AI
model = genai.GenerativeModel('gemini-pro-vision')

def get_gemini_response(input, image, prompt):
    """
    Generates a response using the Gemini model.

    Args:
        input (str): The input text.
        image (list): A list of images.
        prompt (str): The prompt text.

    Returns:
        str: The generated response.
    """
    # Generate content using the model by passing a list containing input text, the first image, and a prompt
    response = model.generate_content([input, image[0], prompt])
    
    # Return the text part of the response generated by the model
    return response.text

def input_image_details(uploaded_file):
    """
    Extracts image details from an uploaded file.

    Args:
        uploaded_file (file-like object): The uploaded file object.

    Returns:
        list: A list containing a dictionary with the MIME type and data of the uploaded file.

    Raises:
        FileNotFoundError: If no file is uploaded.
    """
    # Check if an uploaded file is present
    if uploaded_file is not None:
        # Read the content of the uploaded file into bytes
        bytes_data = uploaded_file.getvalue()
    
        # Prepare the image data for processing
        # This includes the MIME type (e.g., image/jpeg) and the actual byte data of the image
        image_parts = [
            {
                "mime_type": uploaded_file.type,  # The MIME type of the uploaded file
                "data": bytes_data  # The byte data of the image
            }
        ]
    
        # Return the prepared image data for further processing
        return image_parts
    else:
        # If no file was uploaded, raise a FileNotFoundError
        raise FileNotFoundError("No file uploaded")

def pdf_to_images(pdf_file):
    """
    Convert a PDF file to a list of images.

    Args:
        pdf_file (file): The PDF file to convert.

    Returns:
        list: A list of image data in PNG format.
    """
    doc = fitz.open(stream=pdf_file.read(), filetype="pdf")
    images = []
    for page_num in range(len(doc)):
        page = doc.load_page(page_num)
        pix = page.get_pixmap()
        image_data = pix.tobytes("png")
        images.append(image_data)
    return images

def md_to_latex(md_content):
    """
    Convert Markdown content to LaTeX format.

    Args:
        md_content (str): The Markdown content to be converted.

    Returns:
        str: The full LaTeX content, including the preamble, body, and postamble.
    """
    # Definisci il preambolo LaTeX
    latex_preamble = r"""
        \documentclass[a4paper, openright]{report}
        % Margin dimensions
        \usepackage[a4paper,top=3cm,bottom=3cm,left=3cm,right=3cm]{geometry}
        % Font size
        \usepackage[fontsize=13pt]{scrextend}
        % Text language
        \usepackage[english,italian]{babel}
        % Bibliography language
        \usepackage[fixlanguage]{babelbib}
        % Text encoding
        \usepackage[utf8]{inputenc}
        % Text encoding
        \usepackage[T1]{fontenc}
        % Generates dummy text. Useful 
        % to understand how the 
        % text would be formatted on 
        % the page before writing a paragraph
        \usepackage{lipsum}
        % Rotate images
        \usepackage{rotating}
        % Modify page headers 
        \usepackage{fancyhdr}
        % Mathematical libraries
        \usepackage{amssymb}
        \usepackage{amsmath}
        \usepackage{amsthm}
        % Use of images
        \usepackage{graphicx}
        \usepackage{subcaption}
        % Use of colors
        \usepackage[dvipsnames]{xcolor}
        % Use of code listings
        \usepackage{listings}
        % Insert hyperlinks between various text elements 
        \usepackage{hyperref}
        \title{Transcribed Notes}
        \author{}
        \date{\today}
        % Various types of underlining
        \usepackage[normalem]{ulem}
        % Hide title
        \usepackage{titlesec}
        \usepackage{array}
        % Modify header style
        \pagestyle{fancy}
        \fancyhf{}
        \lhead{\rightmark}
        \rhead{\textbf{\thepage}}
        \fancyfoot{}
        \setlength{\headheight}{15.6pt}
        % Remove page number at chapter beginnings
        \fancypagestyle{plain}{ 
        \fancyfoot{}
        \fancyhead{}
        \renewcommand{\headrulewidth}{0pt}
        }
        % Code style
        \lstdefinestyle{codeStyle}{ 
            commentstyle=\color{teal},
            keywordstyle=\color{Magenta},
            numberstyle=\tiny\color{gray},
            stringstyle=\color{violet},
            basicstyle=\ttfamily\footnotesize,
            breakatwhitespace=false,     
            breaklines=true,                 
            captionpos=b,                    
            keepspaces=true,                 
            numbers=left,                    
            numbersep=5pt,                  
            showspaces=false,                
            showstringspaces=false,
            showtabs=false,
            tabsize=2
        }
        \lstset{style=codeStyle}
        \lstdefinestyle{longBlock}{ 
            commentstyle=\color{teal},
            keywordstyle=\color{Magenta},
            numberstyle=\tiny\color{gray},
            stringstyle=\color{violet},
            basicstyle=\ttfamily\tiny,
            breakatwhitespace=false,         
            breaklines=true,                 
            captionpos=b,                    
            keepspaces=true,                 
            numbers=left,                    
            numbersep=5pt,                  
            showspaces=false,                
            showstringspaces=false,
            showtabs=false,                  
            tabsize=2
        }
        \lstset{style=codeStyle}
        \lstset{aboveskip=20pt,belowskip=20pt}
        \definecolor{mycolor}{RGB}{0, 112, 192}
        \hypersetup{ 
            colorlinks,
            linkcolor=mycolor,
            citecolor=mycolor
        }
        \newtheorem{definition}{Definition}[section]
        \newtheorem{theorem}{Theorem}[section]
        \providecommand*\definitionautorefname{Definition}
        \providecommand*\theoremautorefname{Theorem}
        \providecommand*\listingautorefname{Listing}
        \providecommand*\lstnumberautorefname{Line}
        \raggedbottom
        \begin{document}
        \maketitle
    """

    # Convert the Markdown content to LaTeX
    latex_body = pypandoc.convert_text(md_content, 'latex', format='md')

    # Define the LaTeX postamble
    latex_postamble = r"""
    \end{document}
    """

    # Combine the LaTeX content
    full_latex_content = latex_preamble + latex_body + latex_postamble

    return full_latex_content

# Title and header
st.set_page_config(page_title="Handwritten Notes Transcription")
st.header('Handwritten Notes Transcription with Google Gemini')

# Input text field
input = st.text_input("Input prompt: ", key='input')

# Allow users to upload a PDF file containing handwritten notes
uploaded_file = st.file_uploader(r"Choose a PDF of handwritten notes", type=["pdf"])

# Allow users to choose the output format of the transcription from Plain Text, LaTeX, or Markdown
output_format = st.radio("Choose output format:", ("Plain Text", "LaTeX", "Markdown"))

images = []
# Check if a file has been uploaded
if uploaded_file is not None:
    # Convert the uploaded PDF to images, one image per page
    images = pdf_to_images(uploaded_file)
    # Display the number of pages (images) extracted from the uploaded PDF
    st.write(f"Uploaded PDF with {len(images)} pages")

# Submit button
submit = st.button("Transcribe Notes")

def get_custom_prompt(format):
    """
    Returns a custom prompt based on the specified format.

    Parameters:
    - format (str): The desired format of the prompt. Can be "Markdown", "LaTeX", or "Plain Text".

    Returns:
    - str: The custom prompt based on the specified format.
    """
    base_prompt = '''
        You have to transcribe the handwritten notes in the image. 
        The system should accurately recognize 
        and transcribe the text displayed in the image '''
    if format == "Markdown" or format == "LaTeX":
        return f'''{base_prompt}
            in Markdown format. 
            The output should contain structured text with title, chapters, paragraphs, subparagraphs, and so on.
        '''
    elif format == "Plain Text":
        return f'''{base_prompt} 
            in plain text format.
            The output must be displayed in plain text with no markup or formatting.
        '''
    else:
        return base_prompt

# Check if the user has submitted the form and there are images to process
input_prompt = get_custom_prompt(output_format)
if submit and images:
    # Process each image asynchronously using a thread pool
    tasks = {}
    with ThreadPoolExecutor(max_workers=len(images)) as executor:
        for i, image_data in enumerate(images):
            image_parts = [{"mime_type": "image/png", "data": image_data}]
            # Submit a task to process each image
            task = executor.submit(get_gemini_response, get_custom_prompt(output_format), image_parts, input)
            tasks[i] = task

    # Wait for all tasks to complete and collect the responses
    all_responses = [None] * len(images)
    for i in tasks:
        future = tasks[i]
        result = future.result()
        all_responses[i] = result

    # Concatenate all responses into a single output
    output = "\n\n".join(all_responses)

    # If latex format is selected, convert the markdown output to latex
    if output_format == "LaTeX":
        output_path = "transcription.tex"
        formatted_output = md_to_latex(output)
    else:
        formatted_output = output

    # Display the transcription report
    st.subheader("Transcription report: ")
    st.write(formatted_output)
    
    # Provide a download link for the transcription
    st.download_button(
        label="Download Transcription",
        data=formatted_output,
        file_name="transcription.tex" if output_format == "LaTeX" else "transcription.txt" if output_format == "Plain Text" else "transcription.md",
        mime="application/x-tex" if output_format == "LaTeX" else "text/plain" if output_forma